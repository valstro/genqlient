// Code generated by github.com/valstro/genqlient, DO NOT EDIT.

package test

import (
	"github.com/valstro/genqlient/graphql"
	"github.com/valstro/genqlient/internal/testutil"
)

type GetPokemonBoolExp struct {
	And   []*GetPokemonBoolExp `js:"_and" json:"_and"`
	Not   *GetPokemonBoolExp   `js:"_not" json:"_not"`
	Or    []*GetPokemonBoolExp `js:"_or" json:"_or"`
	Level *IntComparisonExp    `js:"level" json:"level"`
}

// GetAnd returns GetPokemonBoolExp.And, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetAnd() []*GetPokemonBoolExp { return v.And }

// GetNot returns GetPokemonBoolExp.Not, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetNot() *GetPokemonBoolExp { return v.Not }

// GetOr returns GetPokemonBoolExp.Or, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetOr() []*GetPokemonBoolExp { return v.Or }

// GetLevel returns GetPokemonBoolExp.Level, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetLevel() *IntComparisonExp { return v.Level }

// GetPokemonResponse is returned by GetPokemon on success.
type GetPokemonResponse struct {
	GetPokemon []*testutil.Pokemon `js:"getPokemon" json:"getPokemon"`
}

// GetGetPokemon returns GetPokemonResponse.GetPokemon, and is useful for accessing the field via an interface.
func (v *GetPokemonResponse) GetGetPokemon() []*testutil.Pokemon { return v.GetPokemon }

type IntComparisonExp struct {
	Eq     *int   `js:"_eq" json:"_eq"`
	Gt     *int   `js:"_gt" json:"_gt"`
	Gte    *int   `js:"_gte" json:"_gte"`
	In     []*int `js:"_in" json:"_in"`
	IsNull *bool  `js:"_isNull" json:"_isNull"`
	Lt     *int   `js:"_lt" json:"_lt"`
	Lte    *int   `js:"_lte" json:"_lte"`
	Neq    *int   `js:"_neq" json:"_neq"`
	Nin    []*int `js:"_nin" json:"_nin"`
}

// GetEq returns IntComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetEq() *int { return v.Eq }

// GetGt returns IntComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetGt() *int { return v.Gt }

// GetGte returns IntComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetGte() *int { return v.Gte }

// GetIn returns IntComparisonExp.In, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetIn() []*int { return v.In }

// GetIsNull returns IntComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetIsNull() *bool { return v.IsNull }

// GetLt returns IntComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetLt() *int { return v.Lt }

// GetLte returns IntComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetLte() *int { return v.Lte }

// GetNeq returns IntComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetNeq() *int { return v.Neq }

// GetNin returns IntComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetNin() []*int { return v.Nin }

// __GetPokemonInput is used internally by genqlient
type __GetPokemonInput struct {
	Where *GetPokemonBoolExp `js:"where" json:"where"`
}

// GetWhere returns __GetPokemonInput.Where, and is useful for accessing the field via an interface.
func (v *__GetPokemonInput) GetWhere() *GetPokemonBoolExp { return v.Where }

// The query executed by GetPokemon.
const GetPokemon_Operation = `
query GetPokemon ($where: getPokemonBoolExp!) {
	getPokemon(where: $where) {
		species
		level
	}
}
`

func GetPokemon(
	client_ graphql.Client,
	where *GetPokemonBoolExp,
) (data_ *GetPokemonResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetPokemon",
		Query:  GetPokemon_Operation,
		Variables: &__GetPokemonInput{
			Where: where,
		},
	}

	data_ = &GetPokemonResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return data_, err_
}

